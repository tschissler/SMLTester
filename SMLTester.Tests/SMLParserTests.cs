using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SMLTester.Tests
{
    [TestClass]
    public class SMLParserTests
    {
        [TestMethod]
        public void ParseSamleDataInt16()
        {
            var testData = new List<byte>
            {
                0x1B, 0x1B, 0x1B, 0x1B,
                0x01, 0x01, 0x01, 0x01,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB2,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x01, 0x01, // getListResponse
                0x76,
                0x01,
                0x01,
                0x05, 0x02, 0x4B, 0x07, 0xE6,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x62, 0x01,
                0x63, 0xB9, 0x63,
                0x00,
                0x76, // Root
                0x05, 0x06, 0xE1, 0x17, 0xB3,
                0x62, 0x00,
                0x62, 0x00,
                0x72, // Level 2
                0x63, 0x07, 0x01,
                0x77,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x01, 0x00, 0x62, 0x0A, 0xFF, 0xFF,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x75,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x32, 0x01, 0x01,
                0x01,
                0x01,
                0x01,
                0x01,
                0x04, 0x49, 0x53, 0x4B,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x01, 0x00, 0xFF,
                0x01,
                0x01,
                0x01,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Server ID
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF,
                0x65, 0x00, 0x1C, 0x01, 0x04,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x01, 0xF7, 0xBD, 0x43, // Verbrauch Tarif 1
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x00, 0x41, 0x28, 0x5E, // Verbrauch Tarif 2
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x10, 0x07, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1B,
                0x52, 0x00,
                0x53, 0x03, 0xEA, // Aktuelle Leistung
                0x01,
                0x01,
                0x01,
                0x63, 0x47, 0x24,
                0x00,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB4,
                0x62, 0x00,
                0x62, 0x00,
                0x72, 0x63,
                0x02, 0x01,
                0x71,
                0x01,
                0x63, 0x49, 0xCB,
                0x00,
                0x00,
                0x1B, 0x1B, 0x1B, 0x1B,
                0x1A, 0x01, 0x1B, 0x72
            };

            var actual = SMLParser.Parse(testData);  

            Assert.AreEqual(3301.3059m, actual.Tarif1);
            Assert.AreEqual(427.0174m, actual.Tarif2);
            Assert.AreEqual(1002m, actual.Power);
        }

        [TestMethod]
        public void ParseSamleDataInt8()
        {
            var testData = new List<byte>
            {
                0x1B, 0x1B, 0x1B, 0x1B,
                0x01, 0x01, 0x01, 0x01,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB2,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x01, 0x01, // getListResponse
                0x76,
                0x01,
                0x01,
                0x05, 0x02, 0x4B, 0x07, 0xE6,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x62, 0x01,
                0x63, 0xB9, 0x63,
                0x00,
                0x76, // Root
                0x05, 0x06, 0xE1, 0x17, 0xB3,
                0x62, 0x00,
                0x62, 0x00,
                0x72, // Level 2
                0x63, 0x07, 0x01,
                0x77,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x01, 0x00, 0x62, 0x0A, 0xFF, 0xFF,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x75,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x32, 0x01, 0x01,
                0x01,
                0x01,
                0x01,
                0x01,
                0x04, 0x49, 0x53, 0x4B,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x01, 0x00, 0xFF,
                0x01,
                0x01,
                0x01,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Server ID
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF,
                0x65, 0x00, 0x1C, 0x01, 0x04,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x01, 0xF7, 0xBD, 0x43, // Verbrauch Tarif 1
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x00, 0x41, 0x28, 0x5E, // Verbrauch Tarif 2
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x10, 0x07, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1B,
                0x52, 0x00,
                0x52, 0xEA, // Aktuelle Leistung
                0x01,
                0x01,
                0x01,
                0x63, 0x47, 0x24,
                0x00,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB4,
                0x62, 0x00,
                0x62, 0x00,
                0x72, 0x63,
                0x02, 0x01,
                0x71,
                0x01,
                0x63, 0x49, 0xCB,
                0x00,
                0x00,
                0x1B, 0x1B, 0x1B, 0x1B,
                0x1A, 0x01, 0x1B, 0x72
            };

            var actual = SMLParser.Parse(testData);

            Assert.AreEqual(3301.3059m, actual.Tarif1);
            Assert.AreEqual(427.0174m, actual.Tarif2);
            Assert.AreEqual(-22, actual.Power);
        }

        [TestMethod]
        public void ParseSamleDataInt32()
        {
            var testData = new List<byte>
            {
                0x1B, 0x1B, 0x1B, 0x1B,
                0x01, 0x01, 0x01, 0x01,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB2,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x01, 0x01, // getListResponse
                0x76,
                0x01,
                0x01,
                0x05, 0x02, 0x4B, 0x07, 0xE6,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x62, 0x01,
                0x63, 0xB9, 0x63,
                0x00,
                0x76, // Root
                0x05, 0x06, 0xE1, 0x17, 0xB3,
                0x62, 0x00,
                0x62, 0x00,
                0x72, // Level 2
                0x63, 0x07, 0x01,
                0x77,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x01, 0x00, 0x62, 0x0A, 0xFF, 0xFF,
                0x72,
                0x62, 0x01,
                0x65, 0x02, 0x4B, 0x08, 0x57,
                0x75,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x32, 0x01, 0x01,
                0x01,
                0x01,
                0x01,
                0x01,
                0x04, 0x49, 0x53, 0x4B,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x60, 0x01, 0x00, 0xFF,
                0x01,
                0x01,
                0x01,
                0x01,
                0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Server ID
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF,
                0x65, 0x00, 0x1C, 0x01, 0x04,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x01, 0xF7, 0xBD, 0x43, // Verbrauch Tarif 1
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x65, 0x00, 0x41, 0x28, 0x5E, // Verbrauch Tarif 2
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x10, 0x07, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1B,
                0x52, 0x00,
                0x55, 0x12, 0x34, 0x56, 0xAB, // Aktuelle Leistung
                0x01,
                0x01,
                0x01,
                0x63, 0x47, 0x24,
                0x00,
                0x76,
                0x05, 0x06, 0xE1, 0x17, 0xB4,
                0x62, 0x00,
                0x62, 0x00,
                0x72, 0x63,
                0x02, 0x01,
                0x71,
                0x01,
                0x63, 0x49, 0xCB,
                0x00,
                0x00,
                0x1B, 0x1B, 0x1B, 0x1B,
                0x1A, 0x01, 0x1B, 0x72
            };

            var actual = SMLParser.Parse(testData);

            Assert.AreEqual(3301.3059m, actual.Tarif1);
            Assert.AreEqual(427.0174m, actual.Tarif2);
            Assert.AreEqual(305419947, actual.Power);
        }

        [TestMethod]
        public void ParseSamleDataEMHMeter()
        {
            var testData = new List<byte>
            {
                0x1B, 0x1B, 0x1B, 0x1B, 0x01, 0x01, 0x01, 0x01,
                0x76,
                0x07, 0x00, 0x13, 0x06, 0x09, 0xC2, 0xB5,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x01, 0x01,
                0x76,
                0x01,
                0x01,
                0x07, 0x00, 0x13, 0x11, 0x38, 0x40, 0xE7,
                0x0B, 0x06, 0x45, 0x4D, 0x48, 0x01, 0x09, 0x6D, 0x93, 0xF8, 0xFA,
                0x01,
                0x01,
                0x63, 0x26, 0x4D,
                0x00,
                0x76,
                0x07, 0x00, 0x13, 0x06, 0x09, 0xC2, 0xB6,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x07, 0x01,
                0x77,
                0x01,
                0x0B, 0x06, 0x45, 0x4D, 0x48, 0x01, 0x09, 0x6D, 0x93, 0xF8, 0xFA,
                0x07, 0x01, 0x00, 0x62, 0x0A, 0xFF, 0xFF,
                0x72,
                0x62, 0x01,
                0x65, 0x11, 0x38, 0x08, 0x5E,
                0x7A,
                0x77,
                0x07, 0x81, 0x81, 0xC7, 0x82, 0x03, 0xFF,
                0x01,
                0x01,
                0x01,
                0x01,
                0x04, 0x45, 0x4D, 0x48,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x00, 0x00, 0x09, 0xFF,
                0x01,
                0x01,
                0x01,
                0x01,
                0x0B, 0x06, 0x45, 0x4D, 0x48, 0x01, 0x09, 0x6D, 0x93, 0xF8, 0xFA,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF,
                0x64, 0x01, 0x02, 0x82,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x19, 0x39, 0xB3, 0x35,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF,
                0x64, 0x01, 0x02, 0x82,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x1A, 0xC3, 0xE6, 0x54,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x01, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x01, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x1A, 0xC3, 0xE6, 0x54,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x01, 0x08, 0x02, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x19, 0x39, 0xB3, 0x35,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x02, 0x08, 0x02, 0xFF,
                0x01,
                0x01,
                0x62, 0x1E,
                0x52, 0xFF,
                0x56, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01,
                0x77,
                0x07, 0x01, 0x00, 0x10, 0x07, 0x00, 0xFF,
                0x01,
                0x01,
                0x62, 0x1B,
                0x52, 0xFF,
                0x55, 0x00, 0x00, 0x01, 0xC2,
                0x01,
                0x77,
                0x07, 0x81, 0x81, 0xC7, 0x82, 0x05, 0xFF,
                0x01,
                0x72,
                0x62, 0x01,
                0x65, 0x11, 0x38, 0x08, 0x5E,
                0x01,
                0x01,
                0x83, 0x02, 0x7A, 0x21, 0x7D, 0x5D, 0x15, 0xA5, 0x33, 0x8D,
                0xD2, 0xD9, 0x4A, 0xCB, 0x11, 0xDB, 0xAB, 0x07, 0xB9, 0x94,
                0xBE, 0x23, 0x34, 0x24, 0xF2, 0x2E, 0x21, 0x8B, 0xC9, 0x10,
                0xF3, 0x34, 0x96, 0xDD, 0xED, 0xA2, 0x99, 0x77, 0x04, 0xB0,
                0xFE, 0xBB, 0xA6, 0x3C, 0x00, 0xE3, 0x32, 0x82, 0x15, 0xE9,
                0x01,
                0x01,
                0x01,
                0x63, 0xB9, 0x20,
                0x00,
                0x76,
                0x07, 0x00, 0x13, 0x06, 0x09, 0xC2, 0xB9,
                0x62, 0x00,
                0x62, 0x00,
                0x72,
                0x63, 0x02, 0x01,
                0x71,
                0x01,
                0x63, 0xB0, 0x51,
                0x00,
                0x00,
                0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x01, 0x1D, 0xB4
                //0x1B, 0x1B, 0x1B, 0x1B,
                //0x1A, 0x01, 0x1B, 0x72
            };

            var actual = SMLParser.Parse(testData);

            Assert.AreEqual(42321.1829m, actual.Tarif1);
            Assert.AreEqual(44904.61m, actual.Tarif2);
            Assert.AreEqual(0, actual.Power);
        }
    }
}
